{"version":3,"sources":["components/Feedback/Feedback.module.css","components/Statistics/Statistics.module.css","components/Section/Section.module.css","components/Notification/Notification.module.css","components/Feedback/FeedbackOptions.js","components/Statistics/Statistics.js","components/Section/Section.js","components/Notification/Notification.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","FeedbackOptions","options","onLeaveFeedback","className","s","buttonswrap","map","option","type","button","status","onClick","Statistics","good","neutral","bad","total","positivePercentage","statresults","Section","title","children","section","Notification","message","App","state","handleFeedback","setState","prevState","countTotal","countPositivePercentage","Math","round","this","Object","keys","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gIACAA,EAAOC,QAAU,CAAC,OAAS,2B,gBCA3BD,EAAOC,QAAU,CAAC,YAAc,kC,oBCAhCD,EAAOC,QAAU,CAAC,QAAU,2B,gBCA5BD,EAAOC,QAAU,CAAC,QAAU,gC,qKCGb,SAASC,EAAT,GAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBAC/C,OACI,qBAAKC,UAAWC,IAAEC,YAAlB,SACKJ,EAAQK,KAAI,SAAAC,GAAM,OACd,wBAAQC,KAAK,SAASL,UAAWC,IAAEK,OAAqBC,OAAQH,EAC/DI,QAAS,kBAAMT,EAAgBK,IADhC,SAC0CA,GADMA,Q,oBCLlD,SAASK,EAAT,GAAuE,IAAjDC,EAAgD,EAAhDA,KAAMC,EAA0C,EAA1CA,QAASC,EAAiC,EAAjCA,IAAKC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,mBAC5D,OACA,gCACI,+BACI,wCAAWJ,KACX,2CAAcC,KACd,uCAAUC,QAEd,oBAAGZ,UAAWC,IAAEc,YAAhB,oBAAqCF,KACrC,oBAAGb,UAAWC,IAAEc,YAAhB,uBAAwCD,EAAxC,U,oBCKOE,MAdd,YAAqC,IAAlBC,EAAiB,EAAjBA,MAAMC,EAAW,EAAXA,SACtB,OACI,0BAASlB,UAAWC,IAAEkB,QAAtB,UACI,6BAAKF,IACJC,M,iBCLE,SAASE,EAAT,GAAmC,IAAXC,EAAU,EAAVA,QACnC,OACI,oBAAIrB,UAAWC,IAAEoB,QAAjB,SAA2BA,I,ICE7BC,E,4MAEFC,MAAQ,CACJb,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPY,eAAiB,SAAApB,GACb,EAAKqB,UAAS,SAAAC,GAAS,sBAClBtB,EAASsB,EAAUtB,GAAU,O,EAItCuB,WAAa,WACX,MAA+B,EAAKJ,MACpC,OADA,EAAQb,KAAR,EAAcC,QAAd,EAAuBC,K,EAIzBgB,wBAA0B,WACxB,IAAQlB,EAAS,EAAKa,MAAdb,KACR,OAAOmB,KAAKC,MAAOpB,EAAO,EAAKiB,aAAgB,MAAQ,G,4CAGzD,WACE,MAA+BI,KAAKR,MAA5Bb,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACvB,OACE,gCACA,cAAC,EAAD,CAASK,MAAM,wBAAf,SACI,cAACpB,EAAD,CAAiBC,QAAYkC,OAAOC,KAAKF,KAAKR,OAC5CxB,gBAAiBgC,KAAKP,mBAGL,IAAtBO,KAAKJ,aAAsB,cAACP,EAAD,CAAcC,QAAQ,yBAA2C,cAAC,EAAD,CAASJ,MAAM,aAAf,SAC3F,cAACR,EAAD,CACEC,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOkB,KAAKJ,aACZb,mBAAoBiB,KAAKH,qC,GAvCrBM,aAiDHZ,IC3CAa,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c07441d3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Feedback_button__2Zq87\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statresults\":\"Statistics_statresults__1t8uH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__1D18S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Notification_message__3dB7n\"};","\r\nimport PropTypes from 'prop-types';\r\nimport s from './Feedback.module.css'\r\n\r\nexport default function FeedbackOptions ({options, onLeaveFeedback }) {\r\n    return (\r\n        <div className={s.buttonswrap}>\r\n            {options.map(option => (\r\n                 <button type='button' className={s.button} key={option} status={option}\r\n                  onClick={() => onLeaveFeedback(option)}>{option}\r\n                  </button>\r\n            ))}\r\n        </div>\r\n    )  \r\n}\r\nFeedbackOptions.propTypes = {\r\n    option: PropTypes.arrayOf(PropTypes.string.isRequired),\r\n    onLeaveFeedback: PropTypes.func.isRequired,\r\n  };\r\n","import PropTypes from 'prop-types';\r\nimport s from './Statistics.module.css'\r\n\r\nexport default function Statistics ({good, neutral, bad, total, positivePercentage}) {\r\n    return(\r\n    <div>\r\n        <ul>\r\n            <li>Good: {good}</li>\r\n            <li>Neutral: {neutral}</li>\r\n            <li>Bad: {bad}</li>\r\n        </ul>\r\n        <p className={s.statresults}>Total: {total}</p>\r\n        <p className={s.statresults}>Positive: {positivePercentage}%</p>\r\n    </div>)\r\n}\r\n\r\nStatistics.propTypes = {\r\n    good: PropTypes.number.isRequired,\r\n    neutral: PropTypes.number.isRequired,\r\n    bad: PropTypes.number.isRequired,\r\n    total: PropTypes.number.isRequired,\r\n    positivePercentage: PropTypes.number.isRequired,\r\n  };","import PropTypes from 'prop-types';\r\nimport s from './Section.module.css'\r\n\r\n function Section ({title,children}) {\r\n    return (\r\n        <section className={s.section}>\r\n            <h2>{title}</h2>\r\n            {children}\r\n        </section>\r\n    )\r\n}\r\n\r\nSection.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    children: PropTypes.node.isRequired,\r\n}\r\n\r\nexport default Section","import s from './Notification.module.css'\r\n\r\nexport default function Notification ({message}) {\r\n    return (\r\n        <h2 className={s.message}>{message}</h2>\r\n    )\r\n}","import React, {Component} from 'react';\nimport FeedbackOptions from './components/Feedback';\nimport Statistics from './components/Statistics';\nimport Section from './components/Section/Section';\nimport Notification from './components/Notification';\n\nclass App extends Component {\n\n    state = {\n        good: 0,\n        neutral: 0,\n        bad: 0,\n      };\n\n      handleFeedback = option => {\n          this.setState(prevState => ({\n              [option]: prevState[option] + 1,\n          }));\n      };\n\n      countTotal = () => {\n        const { good, neutral, bad } = this.state;\n        return good + neutral + bad;\n      };\n\n      countPositivePercentage = () => {\n        const { good } = this.state;\n        return Math.round((good / this.countTotal()) * 100) || 0;\n      };\n\n      render() {\n        const { good, neutral, bad } = this.state;\n        return (\n          <div >\n          <Section title=\"Please Leave feedback\">\n              <FeedbackOptions options = { Object.keys(this.state) }\n                onLeaveFeedback={this.handleFeedback}\n              />\n          </Section>\n          {this.countTotal() === 0 ? (<Notification message=\"There is no feedback\"></Notification>) : (<Section title=\"Statistics\">\n            <Statistics \n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={this.countTotal()}\n              positivePercentage={this.countPositivePercentage()}\n            /> \n          </Section>) }\n          \n          </div>\n        );\n      }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}